---
title: "mc_kienzle"
author: "Thomas M. Rudolf"
date: "2024-03-26"
output: html_document
---

```{r setup, include=FALSE, echo = TRUE}
knitr::opts_chunk$set(echo = TRUE)
library(gt)
library(ggplot2)
library(MASS)
library(patchwork)
library(R2OpenBUGS)
library(rjags)
library(R2jags)
library(patchwork)
library(tidyverse)
```

Kienzle Model for cutting torque:

$F_{ci} = k_c b h^{1-m_c} = a_p f_z^{1-m_c} sin(\kappa)^{m_c} k_{c1.1} sin(\phi + (k-1) \frac{360}{z})^{1-m_c}$

$M_c = \sum_1^z{F_{ci} r_{tool}}$

$a_p$ cutting depth

$f_z$ feed per cutting edge

$\kappa$ main tool angle

$z$ number of cutting edges

$k$ cutting edgre id : 1..z

The value of $m_c$ and $k_{c1.1}$ are material specific values and have to be identified. A mean value 0.25. One will take a #beta distribution# to simulate the resulting torque for different machining situations. The machining are varied in cutting depth $a_p$, feed per tooth $f_z$ and different entrance angles $\phi$.

## Theoretical model, discussion of impact of varying material parameters $m_c$ and $k_{c1.1}$

$m_c$ has a mean of 0.25 and a variance of 0.01.

$k_{c1,1}$ has an mean of 1200 and a variance of 100.

all other parameters are constant.

first, some useful functions are defined: moving average filter allows filtering the N values, max_Mc returns the maximal value of the signal $M_c$ in one revolution (360°)

```{r some usefull functions}
# limiting phi to 2*pi
lim22pi <- function(phi){
N <- length(phi)
id_reduce <- NULL
for(k in 1:N){
    if(phi[k]>2*pi){
      phi[k:N] <- phi[k:N] -2*pi
      id_reduce <- append(id_reduce, k)
    }
}

  listLim22pi <- list(phi, id_reduce)
  return(listLim22pi)
}

# moving average filter
maf <- function(in_signal, n){
  N <- length(in_signal)
  maf_signal <- rep(0, N)
  for(k1 in 1:n){
    maf_signal[k1] <- mean(in_signal[1:k1])
  }
  for(k2 in (n+1):N){
    maf_signal[k2] <- mean(in_signal[(k2-n+1):k2])

  }
  return(maf_signal)
}

# find max Mc in 2pi
max_Mc <- function(id_reduce, Mc, phi){
  # find max in intevall of 2pi
  NMax <- length(id_reduce)
  idx <- 1
  k3_old <- 1
  McMax <- NULL
  phiMcMax <- NULL
  for(k3 in id_reduce){
      Mc_temp <- Mc[k3_old:k3]
      phi_temp <- phi[k3_old:k3]
      McMax <- append(McMax, max(Mc_temp))

      ii <- which(McMax[idx]==Mc_temp)
      #print(ii)
      phiMcMax <- append(phiMcMax, phi_temp[ii[1]])
      #print("angle:")
      #print( phi_temp[ii[1]])
      k3_old <- k3
      idx <- idx+1
  }
  df <- data.frame(McMax, phiMcMax)
  return(df)
}
```

```{r theoretical model by Kienzle}
ap <- 1  # cutting depth in m
fz <- 0.15 # feed per tooth in m
kappa <- 105/180*pi # main angle of tool insert in degree
z <- 4     # number of cutting edges [2, 3, 4]
rtool <- 40/2# tool radius in m
mc <- 0.25
kc11 <- 1200
ae <- 30
SSpinlde <- 2109 # spindle speed in rpm
omegaSpindle <- SSpinlde/60*2*pi # spindle speed in rad/s
dt <- 0.0002

time <- seq(dt,dt*300*2, dt)
NSamples <- length(time)

cum_sin_phi <- rep(0, NSamples)
if(ae<=rtool){
  phi_out <- acos((rtool-ae)/rtool)
}
if(ae>rtool){
  phi_out <- pi/2 + asin((ae-rtool)/rtool)
}
phi_in <- 0 
phi_sim <- omegaSpindle*time
listPhi <-lim22pi(phi_sim)
phi_sim <- listPhi[[1]]
for(time_idx in 1:NSamples){
  for(cutting_edge_idx in 1:z){
    sin_arg <- phi_sim[time_idx] - ((2*pi)/z) * (cutting_edge_idx -1)
    add_sin_comp <- sin(sin_arg)
    cond <- (sin_arg >phi_in) && (sin_arg < phi_out)
    cum_sin_phi[time_idx] <- cum_sin_phi[time_idx] + ifelse(cond, add_sin_comp, 0)
  }
}
AmpMc <- ap*fz^(1-mc)*(sin(kappa)^mc)*kc11
dfModelKienzle <- data.frame(t = time,  Mc = AmpMc*cum_sin_phi, phi_sim)
ggplot(dfModelKienzle, aes(x=phi_sim, y=Mc)) +
  geom_line()

```

The data are imported. The important signals are the torque generating current of the main spindle, the rotational velocity of the main spindle and the time. Based on this data the the toque and the angular position can be calculated.

\$k_m\$: motor torque constant

$I_q$: torque generating current

$M_c$: spindle torque

\$M_c (t) = k_m I_q \$

The examples are plotted for ilustrative purpose

```{r read in milling data}
process_mill <- read.csv("..\\data\\Trace_0622_172347.csv")
#process_mill <- read.csv("..\\data\\Trace_0331_150521.csv")
iqSp <- process_mill$X..Nck..SD.nckServoDataActCurr32..u1..4.
velSp <- process_mill$X..Nck..SD.nckServoDataActVelMot32..u1..4./36 * 0.1047198 # rad/s
time <- process_mill$time
dtime <- diff(time)
dtime <- append(dtime, 0.002)
phi_real <-cumsum(velSp)*0.002
df_phi_real <- lim22pi(phi_real)
phi_real <- df_phi_real[[1]]
N <- length(iqSp)
raund_count = 0
km <- 1.3
Mc <- iqSp * km

df_plot_data_complete <- data.frame(iqSp = iqSp, 
                                    velSp = velSp, 
                                    time = time, 
                                    dtime = dtime, 
                                    phi = phi_real, 
                                    Mc = Mc)

ggplot(df_plot_data_complete) + 
  geom_line(aes(x = time, y = iqSp)) + 
  geom_line(aes(x = time, y = maf(iqSp, 14), colour="current"))+ 
  geom_line(aes(x = time, y = Mc)) + 
  geom_line(aes(x = time, y = maf(Mc, 14), colour="torque"))
  

ggplot(df_plot_data_complete) + 
  geom_line(aes(x = time, y = velSp)) + 
  geom_line(aes(x = time, y = maf(velSp, 14), colour="Spindle velocity")) 

```

For further analysis, only the cutting process is relevant. Therefore the time span in of the cutting process is separated. The result is plotted.

Since the amplitude is the relevant value to evaluate, the signals are analysed per \$0\$\$ to \$2\pi\$\$ interval and the maximal value of $M_c$ is stored.

```{r define value range to evaluate}
id_reduce <- NULL


# max_Mc
# evaluation data in process: 4s to 13s
eval_times <- c(4, 13)
eval_idx <- which((time>=eval_times[1]) & (time<=eval_times[2]))
df2EvalData <- data.frame(iqSp = iqSp[eval_idx], 
                          velSp = velSp[eval_idx],
                          time = time[eval_idx], 
                          phi = phi_real[eval_idx], 
                          Mc = Mc[eval_idx])


dfMcMax <- max_Mc(id_reduce = eval_idx, Mc[eval_idx], phi_real[eval_idx])
dfMcMax_clean <- na.omit(dfMcMax)
```

```{r some nice plots}
df_plots <- df2EvalData |> mutate( mafMc02 = maf(Mc, 7), 
                                   mafMc10 = maf(Mc, 30))
ggplot(df_plots, aes(x = phi*180/pi, y = Mc)) + 
  geom_point()+
  coord_polar()
ggplot(df_plots, aes(x = phi*180/pi, y = Mc)) + 
  geom_point()
ggplot(df_plots, aes(x = time, y = Mc)) + 
  geom_point() +
  geom_line(aes(x=time, mafMc02), color="red") +
  geom_line(aes(x=time, mafMc10), color="blue")



df_plots_arranged <- arrange(df_plots, phi, by_group = TRUE)

## max values of Mc
dfMcMax_clean <- dfMcMax_clean |> mutate(mafMcMax=maf(McMax, 10))
ggplot(dfMcMax_clean, aes(x=phiMcMax, y=McMax))+
  geom_line()+
  geom_line(aes(x=phiMcMax, y=mafMcMax), color="red")
```

The value of $m_c$ is suposed to be beta distributed. To calculate the values $\alpha$ and $\beta$ based on the assumption that the mean value of $m_c$ is 0.25 and the standard deviation of 0.1 considering the characteristics of a beta distribution. {\displaystyle \operatorname {E} \[X\]={\frac {\alpha }{\alpha +\beta }}!} {\displaystyle \operatorname {var} \[X\]={\frac {\alpha \beta }{(\alpha +\beta )^{2}(\alpha +\beta +1)}}!}

```{r beta distribution alpha and beta by mean and varianz, echo = TRUE}
beta_dist_param <- function(m, var){
  alpha <- m^2*(1-m)/var - m
  beta <- alpha * (1-m)/m
  param <- data.frame(alpha, beta)
  return(param)
}


beta_dist_mc <- beta_dist_param(mc, 0.1^2)
beta_dist_mc

beta_dist_kc <- beta_dist_param(kc11, 10^2)
beta_dist_kc

# test the result
N <- 1000

x = seq(0, 1, length.out=N)
xnorm = seq(200, 2000, length.out=N)
m_kc <- 1200
sd_kc <- 50
beta_init_mc <- dbeta(x, beta_dist_mc$alpha, beta_dist_mc$beta)
norm_init_kc <- dnorm(xnorm, m_kc, sd_kc)
df <- data.frame(x = x,
                 xnorm = xnorm,
                 beta_init_mc = beta_init_mc,
                 norm_init_kc = norm_init_kc)

ggplot(df, aes(x=x, y=beta_init_mc)) +
  geom_line()
ggplot(df, aes(x=xnorm, y=norm_init_kc)) +
  geom_line()
```

new idea to calculate the posterior directly (after discussion with Dr. Muñoz)

```{r}
N <- length(dfMcMax$McMax)
mc_sample <- rep(0, N)
kc1_sample <- rep(0, N)
ap <- 0.001  # cutting depth in m
fz <- 0.00015 # feed per tooth in m
kappa <- 105/180*pi # main angle of tool insert in degree
z <- 4     # number of cutting edges [2, 3, 4]
kc1 <- rnorm(1, 1200, 100)
McMax <- dfMcMax_clean$McMax
temp_counter = 0  
for (k in 1:N){
  mc_sample[k] <- (log(Mc[k])-log(ap*fz*kc1))/(log(sin(kappa)/fz))
  if(is.na(mc_sample[k])){
    #print(k)
    temp_counter=temp_counter+1
  }
}
print(temp_counter)
mc_sample <- na.omit(mc_sample)
mc_mean <- mean(mc_sample)
mc_sd <- sd(mc_sample)
mc <- rnorm(1,mc_mean, mc_sd)
for (k in 1:N){
  kc1_sample[k] <- Mc[k]/((ap*(fz)^(1-mc))*sin(kappa)^mc)
}


```

```{r prep data for jags}
ap = 0.001  # cutting depth in m
fz = 0.00015 # feed per tooth in m
kappa = 105/180*pi # main angle of tool insert in degree
z = 4     # number of cutting edges [2, 3, 4]
rtool = 0.040/2# tool radius in m
alpha_mc = beta_dist_mc$alpha
beta_mc = beta_dist_mc$alpha
m_kc = m_kc
sd_kc = sd_kc




data_mill <- list("k" = length(dfMcMax_clean$McMax), 
                  "Mc" = dfMcMax_clean$McMax,
                  "ap" = ap, 
                  "fz" = fz,
                  "rtool" = rtool,
                  "kappa" = kappa, 
                  "m_kc" = m_kc, 
                  "tau_kc" = 1/(sd_kc)^2,
                  "alpha_mc" = beta_dist_mc$alpha,
                  "beta_mc" = beta_dist_mc$beta
                  )
inits <- function(){list(mc=0.25, kc11=1.2e3)}
#inits <- function(){list(mc=0.25)}
#parameters <- c("mc", "kc1", "mc_estim", "kc1_estim")
parameters <- c("mc", "kc11")

```

the distribiution $m_c[i] = f(m_c|k_{c1.1})$: the value for $k_{c1.1}$ is asummed as a normal distribution with the mentioned values as start values.

$m_c[1] = \frac{log(Mc[i])-log(a_p f_z k_{c1.})}{log(sin(\kappa)/f_z)}$

```{r definition of jags model to identify mc and kc11}

cat("model {
    # Likelihood
    for (i in 1:k) {
        # Model equation
        Mc[i] ~ dnorm(pred[i], tau)
        pred[i] <- ap * fz^(1 - mc) * sin(kappa)^(mc) * kc11 * rtool
    }

    # Priors
    kc11 ~ dnorm(m_kc, tau_kc)  # Normal prior with mean 1200 and precision 1/50^2
    mc ~ dbeta(alpha_mc, beta_mc)      # Uniform prior between 0 and 1

    # Precision for the normal distribution (tau = 1/variance)
    tau ~ dgamma(0.1, 0.1) # Gamma prior for precision
}", file="jags_kienzle_McMax.txt")

```

```{r run jags model}
jags_kienzle_mc <- jags(data_mill, inits, parameters, model.file="jags_kienzle_McMax.txt", 
                      n.iter=5000, n.chains=20, n.burnin=1000)
```

Once the actualized ditribution for $m_c$ we repeat another Gibbs Sampler is implemented to find an improved distribution for $k_{c1.1}$ using the new posterior distribution of $m_c$. This procedure is repeated until the both distributions are stabled.

\$k\_{c1.1}\[i\] = \frac{M_c[i]}{(ap fz^{1-mc} sin(\kappa)^mc))}

```{r}
data_mill_cont <- list("k" = length(Mc), 
                  "Mc" = Mc,
                  "phi"= abs(phi_real),
                  "ap" = ap, 
                  "fz" = fz,
                  "z"  = z,
                  "rtool" = rtool,
                  "kappa" = kappa, 
                  "m_kc" = m_kc, 
                  "tau_kc" = 1/(sd_kc)^2,
                  "alpha_mc" = beta_dist_mc$alpha,
                  "beta_mc" = beta_dist_mc$beta
                  )
inits_cont <- function(){list(mc=0.25, kc11=1.2e3)}
#parameters <- c("mc", "kc1", "mc_estim", "kc1_estim")
parameters_cont <- c("kc11", "mc")
```

![](images/clipboard-9133593.png)

```{r definition of jags model to identify kc11}
cat("model {

    pi <- 3.141593
    # Likelihood
    for (i in 1:k) {
        # calculate the prediction
        sin_sum[i] <- pow(sin(phi[i]), 1 - mc) + 
          pow(sin(phi[i] + 2 * pi / z), 1 - mc) + 
          pow(sin(phi[i] + 4 * pi / z), 1 - mc) +    
          pow(sin(phi[i] + 6 * pi / z), 1 - mc)
        
        pred[i] <- (ap * pow(fz, (1 - mc)) * pow(sin(kappa), mc) * kc11 * rtool) * sin_sum[i]
        
        # Model equation
        Mc[i] ~ dnorm(pred[i], tau)
    }
    
    # Priors
    kc11 ~ dnorm(m_kc, tau_kc)  # Normal prior with mean 1200 and precision 1/50^2
    mc ~ dbeta(alpha_mc, beta_mc)      # Uniform prior between 0 and 1

    # Precision for the normal distribution (tau = 1/variance)
    tau ~ dgamma(0.1, 0.1) # Gamma prior for precision

}", file="jags_kienzle_cont.txt")




```

```{r run jags model for kc11}
jags_kienzle_cont <- jags(data_mill_cont, inits_cont, parameters_cont, model.file="jags_kienzle_cont.txt", 
                      n.iter=5000, n.chains=20, n.burnin=1000)
```
